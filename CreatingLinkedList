/**
 * Created by ravikumarsingh on 5/27/15.
 */
class Node {
    int data;
    Node pointer;

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getPointer() {
        return pointer;
    }

    public void setPointer(Node pointer) {
        this.pointer = pointer;
    }

    Node(int data){
        this.data = data;
        this.pointer = null;
    }
}

class LinkedList{
    Node head;

    public void printLinkedList(){
        while( head!= null){
            System.out.println(head.getData());
            head = head.pointer;
        }
    }

    public void addingNodeToHead(int data){
        Node newNode = new Node(data);
        newNode.setPointer(head);
        head = newNode;
    }

    public  void addingNodeToMiddle(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(previousNode.pointer);
        previousNode.setPointer(newNode);
    }


    public  void addingNodeToEnd(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(null);
        previousNode.setPointer(newNode);
    }

    public void deletingNode(int data){
        Node previous = null;
        Node temp = head;
        int notPresent =0;
        while( temp!=null){
            if( temp.getData() == data){
                notPresent =1;
                break;
            }
            previous = temp;
            temp = temp.pointer;
        }
        if( notPresent ==0){
            System.out.println("The Node is not present in the linkedList");
        }
        else {
            if ( previous == null){
                head = temp.getPointer();
                temp.setPointer(null);
            }
            else {
                previous.setPointer(temp.getPointer());
                temp.setPointer(null);
            }
        }
    }

    public static void main(String[] args) {
        LinkedList myList = new LinkedList();
        myList.addingNodeToHead(20);
        myList.addingNodeToHead(10);
        myList.addingNodeToHead(40);
        myList.addingNodeToMiddle(50, myList.head.pointer.pointer);
        myList.addingNodeToEnd(70, myList.head.pointer.pointer.pointer);
        myList.deletingNode(70);
        myList.printLinkedList();
    }
}
