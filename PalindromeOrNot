

/**
 * The Node class creates node of the Linked List
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

class Node {

    int data;
    Node pointer;

    Node(int data){
        this.data = data;
        this.pointer = null;
    }

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getPointer() {
        return pointer;
    }

    public void setPointer(Node pointer) {
        this.pointer = pointer;
    }
}

/**
 * The SearchingLinkedList class is to create the Linked List
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */
class PalindromeLinkedList{
    Node head;
    static int height =0;
    /**
     * Function to print the Linked List
     * @param
     * @return void
     */
    public void printLinkedList(){
        Node temp = head;
        while( temp!= null){
            System.out.println(temp.getData());
            temp = temp.pointer;
        }
    }

    /**
     * Function to adding a node to the head of the Linked List
     * @param  data
     * @return void
     */
    public void addingNodeToHead(int data){
        Node newNode = new Node(data);
        newNode.setPointer(head);
        head = newNode;
    }

    /**
     * Function to adding a node to a specific position of the Linked List
     * @param  data, PreviousNode
     * @return void
     */
    public  void addingNodeToMiddle(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(previousNode.pointer);
        previousNode.setPointer(newNode);
    }

    /**
     * Function to adding a node to the end of the Linked List
     * @param  data, PreviousNode
     * @return void
     */
    public  void addingNodeToEnd(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(null);
        previousNode.setPointer(newNode);
    }

    /**
     * Function to delete the node of the LinkedList
     * @param  data
     * @return void
     */
    public void deletingNode(int data){
        Node previous = null;
        Node temp = head;
        int notPresent =0;
        while( temp!=null){
            if( temp.getData() == data){
                notPresent =1;
                break;
            }
            previous = temp;
            temp = temp.pointer;
        }
        if( notPresent ==0){
            System.out.println("The Node is not present in the linkedList");
        }
        else {
            if ( previous == null){
                head = temp.getPointer();
                temp.setPointer(null);
            }
            else {
                previous.setPointer(temp.getPointer());
                temp.setPointer(null);
            }
        }
    }

    /**
     * isPalindrome is to check if the linkedList is Palindrome or not
     * @param
     * @return boolean
     */
    public boolean isPalindrome(){
               findingTheElement();
        return palindromeLinkedList(head, head,0);
    }

    /**
     * findingTheElement is to find the length of the LinkedList
     * @param
     * @return void
     */
    private void findingTheElement() {
        Node temp = head;

        while( temp!=null){
            height++;
            temp = temp.pointer;
        }
    }

    /**
     * palindromeLinkedList is to check if the linkedList is Palindrome or not using recursion
     * @param left, right, level
     * @return boolean
     */
    private boolean palindromeLinkedList(Node left, Node right, int level) {
        if( right ==null){
            return true;
        }

        level++;
        boolean pll = palindromeLinkedList(left, right.getPointer(), level);
        if(pll == false){
            return false;
        }

        boolean result = false;
        int diff = height - level;
        while( diff!= 0) {
            left = left.getPointer();
            diff--;
        }

        if( left.getData() == right.getData()){
            result =true;
        }
        return result;
    }

    /**
     * The main method begins execution of the tests.
     *
     * @param args not used
     */
    public static void main(String[] args) {
        PalindromeLinkedList myList = new PalindromeLinkedList();
        myList.addingNodeToHead(20);
        myList.addingNodeToHead(10);
        myList.addingNodeToHead(40);
        myList.addingNodeToMiddle(10, myList.head.pointer.pointer);
        myList.addingNodeToEnd(40, myList.head.pointer.pointer.pointer);
        myList.deletingNode(20);
        boolean result = myList.isPalindrome();
        if(result){
            System.out.println("The Linked List is Palindrome");
        } else {
            System.out.println("The Linked List is not a Palindrome");
        }

    }
}
