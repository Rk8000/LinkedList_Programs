/**
 * The Node class creates node of the Linked List
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

class Node {

    int data;
    Node pointer;

    Node(int data){
        this.data = data;
        this.pointer = null;
    }

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getPointer() {
        return pointer;
    }

    public void setPointer(Node pointer) {
        this.pointer = pointer;
    }
}

/**
 * The SearchingLinkedList class is to create the Linked List
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */
class ReverseFromMiddle{
    Node head;

    /**
     * Function to print the Linked List
     * @param
     * @return void
     */
    public void printLinkedList(Node head){
        Node temp = head;
        while( temp!= null){
            System.out.println(temp.getData());
            temp = temp.pointer;
        }
    }

    /**
     * Function to adding a node to the head of the Linked List
     * @param  data
     * @return void
     */
    public void addingNodeToHead(int data){
        Node newNode = new Node(data);
        newNode.setPointer(head);
        head = newNode;
    }

    /**
     * Function to adding a node to a specific position of the Linked List
     * @param  data, PreviousNode
     * @return void
     */
    public  void addingNodeToMiddle(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(previousNode.pointer);
        previousNode.setPointer(newNode);
    }

    /**
     * Function to adding a node to the end of the Linked List
     * @param  data, PreviousNode
     * @return void
     */
    public  void addingNodeToEnd(int data, Node previousNode){
        Node newNode = new Node(data);
        newNode.setPointer(null);
        previousNode.setPointer(newNode);
    }

    /**
     * Function to delete the node of the LinkedList
     * @param  data
     * @return void
     */
    public void deletingNode(int data){
        Node previous = null;
        Node temp = head;
        int notPresent =0;
        while( temp!=null){
            if( temp.getData() == data){
                notPresent =1;
                break;
            }
            previous = temp;
            temp = temp.pointer;
        }
        if( notPresent ==0){
            System.out.println("The Node is not present in the linkedList");
        }
        else {
            if ( previous == null){
                head = temp.getPointer();
                temp.setPointer(null);
            }
            else {
                previous.setPointer(temp.getPointer());
                temp.setPointer(null);
            }
        }
    }

    /**
     * reversingMiddle is to reverse the linked list from its middle
     * @param  head
     * @return void
     */
    public void reversingMiddle(Node head){
        int count = 0;
        int newCount =1;
        int index;
        Node temp = head;
        Node middle = head;
        Node middlePrev = null;
        while( temp!= null){
            count++;
            temp = temp.getPointer();
        }

        if( count % 2 == 0 ){
           index = count/2;
            while( middle!=null ){
                if( index  == newCount){
                    break;
                }
                newCount++;
                middlePrev = middle;
                middle = middle.getPointer();
            }
        } else {
           index = count/2 +1 ;
            while( middle!=null ) {
                if (index == newCount) {
                    break;
                }
                newCount++;
                middlePrev = middle;
                middle = middle.getPointer();
            }
        }
        Node next = null;
        Node current = middle;
        Node prev = null;

        while( current!= null){
            next = current.getPointer();
            current.setPointer(prev);
            prev = current;
            current = next;
        }
        middlePrev.setPointer(prev);
    }

    /**
     * The main method begins execution of the tests.
     *
     * @param args not used
     */
    public static void main(String[] args) {
        ReverseFromMiddle first = new ReverseFromMiddle();
        first.addingNodeToHead(15);
        first.addingNodeToHead(10);
        first.addingNodeToHead(5);
        first.addingNodeToHead(20);
        first.addingNodeToHead(3);
        first.addingNodeToHead(2);
        first.printLinkedList(first.head);
        first.reversingMiddle(first.head);
        System.out.println("after reversing from the middle");
        first.printLinkedList(first.head);
    }
}
